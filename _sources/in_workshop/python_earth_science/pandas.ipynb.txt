{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tabular Data with Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Pandas](https://pandas.pydata.org/docs/getting_started/intro_tutorials/index.html) is the most popular Python tool for data analysis. It handles tabular data and has tons of nice features for manipulating text, grouping data by attributes, formatting dates, the list goes on... Even if you do not use tabular or csv data, you will likely end up using Pandas tools for some of their nice data-wrangling features. In general, if you have data that could be organized in an Excel spreadsheet or a table, you should use Pandas. This is particularly useful for data downloaded from places like NOAA and USGS where observations from individual meaurement stations are usually concatenated into a table of some kind. Pandas can be used to open data in CSV, HTML, JSON, XLS, Parquet, SQL, GBQ formats and more. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Earthquake Data Tutorial\n",
    "\n",
    "For this tutorial we have grabbed the last 30 days of global earthquake activity from [USGS](https://earthquake.usgs.gov/earthquakes/search/) (downloaded August 11th, 2025). The data only includes earthquakes of magnitude greater than or equal to 2.5. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd #import the pandas library\n",
    "\n",
    "# open our csv file, this assumes it is in the top level of your VSCode workspace\n",
    "df = pd.read_csv('global_30day_earthquakes.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we open a dataset, Pandas reads the data into an object called a 'DataFrame' which looks like a table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "      <th>magType</th>\n",
       "      <th>nst</th>\n",
       "      <th>gap</th>\n",
       "      <th>dmin</th>\n",
       "      <th>rms</th>\n",
       "      <th>...</th>\n",
       "      <th>updated</th>\n",
       "      <th>place</th>\n",
       "      <th>type</th>\n",
       "      <th>horizontalError</th>\n",
       "      <th>depthError</th>\n",
       "      <th>magError</th>\n",
       "      <th>magNst</th>\n",
       "      <th>status</th>\n",
       "      <th>locationSource</th>\n",
       "      <th>magSource</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2025-08-12T00:30:58.784Z</td>\n",
       "      <td>62.008000</td>\n",
       "      <td>-145.533400</td>\n",
       "      <td>9.800</td>\n",
       "      <td>2.60</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:37:39.629Z</td>\n",
       "      <td>7 km SW of Copperville, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2025-08-12T00:30:53.834Z</td>\n",
       "      <td>61.740900</td>\n",
       "      <td>-146.097200</td>\n",
       "      <td>42.400</td>\n",
       "      <td>2.60</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.5700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:35.397Z</td>\n",
       "      <td>38 km S of Tolsona, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2025-08-11T23:45:41.896Z</td>\n",
       "      <td>51.193700</td>\n",
       "      <td>160.859900</td>\n",
       "      <td>10.000</td>\n",
       "      <td>4.50</td>\n",
       "      <td>mb</td>\n",
       "      <td>25.0</td>\n",
       "      <td>135.00</td>\n",
       "      <td>2.2830</td>\n",
       "      <td>0.4400</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:10:36.040Z</td>\n",
       "      <td>256 km SE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>7.30</td>\n",
       "      <td>1.883</td>\n",
       "      <td>0.069</td>\n",
       "      <td>61.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2025-08-11T21:24:31.503Z</td>\n",
       "      <td>41.242100</td>\n",
       "      <td>-116.714900</td>\n",
       "      <td>6.300</td>\n",
       "      <td>2.90</td>\n",
       "      <td>ml</td>\n",
       "      <td>14.0</td>\n",
       "      <td>144.57</td>\n",
       "      <td>0.3420</td>\n",
       "      <td>0.1627</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-11T22:14:22.638Z</td>\n",
       "      <td>60 km NE of Valmy, Nevada</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.300</td>\n",
       "      <td>0.260</td>\n",
       "      <td>12.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>nn</td>\n",
       "      <td>nn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2025-08-11T21:02:42.456Z</td>\n",
       "      <td>51.651500</td>\n",
       "      <td>159.778700</td>\n",
       "      <td>35.000</td>\n",
       "      <td>5.00</td>\n",
       "      <td>mb</td>\n",
       "      <td>61.0</td>\n",
       "      <td>106.00</td>\n",
       "      <td>1.5390</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:51.040Z</td>\n",
       "      <td>170 km SSE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>6.76</td>\n",
       "      <td>1.859</td>\n",
       "      <td>0.043</td>\n",
       "      <td>175.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2658</th>\n",
       "      <td>2025-07-13T03:02:17.889Z</td>\n",
       "      <td>-22.593300</td>\n",
       "      <td>-68.014400</td>\n",
       "      <td>153.524</td>\n",
       "      <td>4.40</td>\n",
       "      <td>mb</td>\n",
       "      <td>29.0</td>\n",
       "      <td>89.00</td>\n",
       "      <td>0.3880</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-02T22:30:27.040Z</td>\n",
       "      <td>40 km NNE of San Pedro de Atacama, Chile</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>7.46</td>\n",
       "      <td>5.557</td>\n",
       "      <td>0.138</td>\n",
       "      <td>15.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2659</th>\n",
       "      <td>2025-07-13T02:32:49.570Z</td>\n",
       "      <td>32.791833</td>\n",
       "      <td>-115.829333</td>\n",
       "      <td>4.810</td>\n",
       "      <td>2.62</td>\n",
       "      <td>ml</td>\n",
       "      <td>67.0</td>\n",
       "      <td>28.00</td>\n",
       "      <td>0.1032</td>\n",
       "      <td>0.2600</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-02T22:22:55.040Z</td>\n",
       "      <td>17 km ENE of Ocotillo, CA</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.640</td>\n",
       "      <td>0.121</td>\n",
       "      <td>131.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>ci</td>\n",
       "      <td>ci</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2660</th>\n",
       "      <td>2025-07-13T00:49:42.340Z</td>\n",
       "      <td>-9.885400</td>\n",
       "      <td>116.631100</td>\n",
       "      <td>54.034</td>\n",
       "      <td>4.10</td>\n",
       "      <td>mb</td>\n",
       "      <td>17.0</td>\n",
       "      <td>104.00</td>\n",
       "      <td>1.5440</td>\n",
       "      <td>0.4500</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-07-25T02:12:15.040Z</td>\n",
       "      <td>128 km S of Taliwang, Indonesia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>8.08</td>\n",
       "      <td>5.198</td>\n",
       "      <td>0.174</td>\n",
       "      <td>9.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2661</th>\n",
       "      <td>2025-07-13T00:30:59.994Z</td>\n",
       "      <td>50.336900</td>\n",
       "      <td>-175.400000</td>\n",
       "      <td>10.000</td>\n",
       "      <td>2.80</td>\n",
       "      <td>ml</td>\n",
       "      <td>19.0</td>\n",
       "      <td>235.00</td>\n",
       "      <td>1.6530</td>\n",
       "      <td>0.7300</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-07-22T21:41:02.040Z</td>\n",
       "      <td>191 km SSE of Adak, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>3.57</td>\n",
       "      <td>2.019</td>\n",
       "      <td>0.105</td>\n",
       "      <td>12.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2662</th>\n",
       "      <td>2025-07-13T00:11:12.440Z</td>\n",
       "      <td>-49.427300</td>\n",
       "      <td>-8.066900</td>\n",
       "      <td>10.000</td>\n",
       "      <td>4.50</td>\n",
       "      <td>mb</td>\n",
       "      <td>14.0</td>\n",
       "      <td>106.00</td>\n",
       "      <td>22.4470</td>\n",
       "      <td>0.6600</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-07-25T01:58:47.040Z</td>\n",
       "      <td>southern Mid-Atlantic Ridge</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>8.85</td>\n",
       "      <td>1.934</td>\n",
       "      <td>0.145</td>\n",
       "      <td>14.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2663 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          time   latitude   longitude    depth   mag magType  \\\n",
       "0     2025-08-12T00:30:58.784Z  62.008000 -145.533400    9.800  2.60      ml   \n",
       "1     2025-08-12T00:30:53.834Z  61.740900 -146.097200   42.400  2.60      ml   \n",
       "2     2025-08-11T23:45:41.896Z  51.193700  160.859900   10.000  4.50      mb   \n",
       "3     2025-08-11T21:24:31.503Z  41.242100 -116.714900    6.300  2.90      ml   \n",
       "4     2025-08-11T21:02:42.456Z  51.651500  159.778700   35.000  5.00      mb   \n",
       "...                        ...        ...         ...      ...   ...     ...   \n",
       "2658  2025-07-13T03:02:17.889Z -22.593300  -68.014400  153.524  4.40      mb   \n",
       "2659  2025-07-13T02:32:49.570Z  32.791833 -115.829333    4.810  2.62      ml   \n",
       "2660  2025-07-13T00:49:42.340Z  -9.885400  116.631100   54.034  4.10      mb   \n",
       "2661  2025-07-13T00:30:59.994Z  50.336900 -175.400000   10.000  2.80      ml   \n",
       "2662  2025-07-13T00:11:12.440Z -49.427300   -8.066900   10.000  4.50      mb   \n",
       "\n",
       "       nst     gap     dmin     rms  ...                   updated  \\\n",
       "0      NaN     NaN      NaN  0.8700  ...  2025-08-12T00:37:39.629Z   \n",
       "1      NaN     NaN      NaN  0.5700  ...  2025-08-12T00:35:35.397Z   \n",
       "2     25.0  135.00   2.2830  0.4400  ...  2025-08-12T00:10:36.040Z   \n",
       "3     14.0  144.57   0.3420  0.1627  ...  2025-08-11T22:14:22.638Z   \n",
       "4     61.0  106.00   1.5390  0.6000  ...  2025-08-12T00:35:51.040Z   \n",
       "...    ...     ...      ...     ...  ...                       ...   \n",
       "2658  29.0   89.00   0.3880  0.8700  ...  2025-08-02T22:30:27.040Z   \n",
       "2659  67.0   28.00   0.1032  0.2600  ...  2025-08-02T22:22:55.040Z   \n",
       "2660  17.0  104.00   1.5440  0.4500  ...  2025-07-25T02:12:15.040Z   \n",
       "2661  19.0  235.00   1.6530  0.7300  ...  2025-07-22T21:41:02.040Z   \n",
       "2662  14.0  106.00  22.4470  0.6600  ...  2025-07-25T01:58:47.040Z   \n",
       "\n",
       "                                         place        type horizontalError  \\\n",
       "0               7 km SW of Copperville, Alaska  earthquake             NaN   \n",
       "1                   38 km S of Tolsona, Alaska  earthquake             NaN   \n",
       "2             256 km SE of Vilyuchinsk, Russia  earthquake            7.30   \n",
       "3                    60 km NE of Valmy, Nevada  earthquake             NaN   \n",
       "4            170 km SSE of Vilyuchinsk, Russia  earthquake            6.76   \n",
       "...                                        ...         ...             ...   \n",
       "2658  40 km NNE of San Pedro de Atacama, Chile  earthquake            7.46   \n",
       "2659                 17 km ENE of Ocotillo, CA  earthquake            0.20   \n",
       "2660           128 km S of Taliwang, Indonesia  earthquake            8.08   \n",
       "2661                191 km SSE of Adak, Alaska  earthquake            3.57   \n",
       "2662               southern Mid-Atlantic Ridge  earthquake            8.85   \n",
       "\n",
       "     depthError  magError  magNst     status  locationSource magSource  \n",
       "0         0.300       NaN     NaN  automatic              ak        ak  \n",
       "1         3.200       NaN     NaN  automatic              ak        ak  \n",
       "2         1.883     0.069    61.0   reviewed              us        us  \n",
       "3         3.300     0.260    12.0   reviewed              nn        nn  \n",
       "4         1.859     0.043   175.0   reviewed              us        us  \n",
       "...         ...       ...     ...        ...             ...       ...  \n",
       "2658      5.557     0.138    15.0   reviewed              us        us  \n",
       "2659      0.640     0.121   131.0   reviewed              ci        ci  \n",
       "2660      5.198     0.174     9.0   reviewed              us        us  \n",
       "2661      2.019     0.105    12.0   reviewed              us        us  \n",
       "2662      1.934     0.145    14.0   reviewed              us        us  \n",
       "\n",
       "[2663 rows x 22 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# inspect our dataframe\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2663 entries, 0 to 2662\n",
      "Data columns (total 22 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   time             2663 non-null   object \n",
      " 1   latitude         2663 non-null   float64\n",
      " 2   longitude        2663 non-null   float64\n",
      " 3   depth            2663 non-null   float64\n",
      " 4   mag              2663 non-null   float64\n",
      " 5   magType          2663 non-null   object \n",
      " 6   nst              2498 non-null   float64\n",
      " 7   gap              2496 non-null   float64\n",
      " 8   dmin             2496 non-null   float64\n",
      " 9   rms              2662 non-null   float64\n",
      " 10  net              2663 non-null   object \n",
      " 11  id               2663 non-null   object \n",
      " 12  updated          2663 non-null   object \n",
      " 13  place            2663 non-null   object \n",
      " 14  type             2663 non-null   object \n",
      " 15  horizontalError  2481 non-null   float64\n",
      " 16  depthError       2662 non-null   float64\n",
      " 17  magError         2470 non-null   float64\n",
      " 18  magNst           2478 non-null   float64\n",
      " 19  status           2663 non-null   object \n",
      " 20  locationSource   2663 non-null   object \n",
      " 21  magSource        2663 non-null   object \n",
      "dtypes: float64(12), object(10)\n",
      "memory usage: 457.8+ KB\n"
     ]
    }
   ],
   "source": [
    "# instead of looking at the whole table, lets see an overview of the information we have \n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the column 'time' has been recognized as a generic object, instead of a date. Let's fix that by telling Pandas which column to interpret as a date type. The list above tells us that the date is the 0th column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('global_30day_earthquakes.csv', parse_dates=[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we run `df.info()` again, we can see that time is now a datetime64 type. We can also see that the datetime units are nanoseconds, and that it is UTC time. One of the best features of Pandas is the ease with which it can handle and interpret dates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2663 entries, 0 to 2662\n",
      "Data columns (total 22 columns):\n",
      " #   Column           Non-Null Count  Dtype              \n",
      "---  ------           --------------  -----              \n",
      " 0   time             2663 non-null   datetime64[ns, UTC]\n",
      " 1   latitude         2663 non-null   float64            \n",
      " 2   longitude        2663 non-null   float64            \n",
      " 3   depth            2663 non-null   float64            \n",
      " 4   mag              2663 non-null   float64            \n",
      " 5   magType          2663 non-null   object             \n",
      " 6   nst              2498 non-null   float64            \n",
      " 7   gap              2496 non-null   float64            \n",
      " 8   dmin             2496 non-null   float64            \n",
      " 9   rms              2662 non-null   float64            \n",
      " 10  net              2663 non-null   object             \n",
      " 11  id               2663 non-null   object             \n",
      " 12  updated          2663 non-null   object             \n",
      " 13  place            2663 non-null   object             \n",
      " 14  type             2663 non-null   object             \n",
      " 15  horizontalError  2481 non-null   float64            \n",
      " 16  depthError       2662 non-null   float64            \n",
      " 17  magError         2470 non-null   float64            \n",
      " 18  magNst           2478 non-null   float64            \n",
      " 19  status           2663 non-null   object             \n",
      " 20  locationSource   2663 non-null   object             \n",
      " 21  magSource        2663 non-null   object             \n",
      "dtypes: datetime64[ns, UTC](1), float64(12), object(9)\n",
      "memory usage: 457.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can inspect the first few entries with `df.head()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "      <th>magType</th>\n",
       "      <th>nst</th>\n",
       "      <th>gap</th>\n",
       "      <th>dmin</th>\n",
       "      <th>rms</th>\n",
       "      <th>...</th>\n",
       "      <th>updated</th>\n",
       "      <th>place</th>\n",
       "      <th>type</th>\n",
       "      <th>horizontalError</th>\n",
       "      <th>depthError</th>\n",
       "      <th>magError</th>\n",
       "      <th>magNst</th>\n",
       "      <th>status</th>\n",
       "      <th>locationSource</th>\n",
       "      <th>magSource</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2025-08-12 00:30:58.784000+00:00</td>\n",
       "      <td>62.0080</td>\n",
       "      <td>-145.5334</td>\n",
       "      <td>9.8</td>\n",
       "      <td>2.6</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:37:39.629Z</td>\n",
       "      <td>7 km SW of Copperville, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2025-08-12 00:30:53.834000+00:00</td>\n",
       "      <td>61.7409</td>\n",
       "      <td>-146.0972</td>\n",
       "      <td>42.4</td>\n",
       "      <td>2.6</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.5700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:35.397Z</td>\n",
       "      <td>38 km S of Tolsona, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2025-08-11 23:45:41.896000+00:00</td>\n",
       "      <td>51.1937</td>\n",
       "      <td>160.8599</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>mb</td>\n",
       "      <td>25.0</td>\n",
       "      <td>135.00</td>\n",
       "      <td>2.283</td>\n",
       "      <td>0.4400</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:10:36.040Z</td>\n",
       "      <td>256 km SE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>7.30</td>\n",
       "      <td>1.883</td>\n",
       "      <td>0.069</td>\n",
       "      <td>61.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2025-08-11 21:24:31.503000+00:00</td>\n",
       "      <td>41.2421</td>\n",
       "      <td>-116.7149</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>ml</td>\n",
       "      <td>14.0</td>\n",
       "      <td>144.57</td>\n",
       "      <td>0.342</td>\n",
       "      <td>0.1627</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-11T22:14:22.638Z</td>\n",
       "      <td>60 km NE of Valmy, Nevada</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.300</td>\n",
       "      <td>0.260</td>\n",
       "      <td>12.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>nn</td>\n",
       "      <td>nn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2025-08-11 21:02:42.456000+00:00</td>\n",
       "      <td>51.6515</td>\n",
       "      <td>159.7787</td>\n",
       "      <td>35.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>mb</td>\n",
       "      <td>61.0</td>\n",
       "      <td>106.00</td>\n",
       "      <td>1.539</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:51.040Z</td>\n",
       "      <td>170 km SSE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>6.76</td>\n",
       "      <td>1.859</td>\n",
       "      <td>0.043</td>\n",
       "      <td>175.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              time  latitude  longitude  depth  mag magType  \\\n",
       "0 2025-08-12 00:30:58.784000+00:00   62.0080  -145.5334    9.8  2.6      ml   \n",
       "1 2025-08-12 00:30:53.834000+00:00   61.7409  -146.0972   42.4  2.6      ml   \n",
       "2 2025-08-11 23:45:41.896000+00:00   51.1937   160.8599   10.0  4.5      mb   \n",
       "3 2025-08-11 21:24:31.503000+00:00   41.2421  -116.7149    6.3  2.9      ml   \n",
       "4 2025-08-11 21:02:42.456000+00:00   51.6515   159.7787   35.0  5.0      mb   \n",
       "\n",
       "    nst     gap   dmin     rms  ...                   updated  \\\n",
       "0   NaN     NaN    NaN  0.8700  ...  2025-08-12T00:37:39.629Z   \n",
       "1   NaN     NaN    NaN  0.5700  ...  2025-08-12T00:35:35.397Z   \n",
       "2  25.0  135.00  2.283  0.4400  ...  2025-08-12T00:10:36.040Z   \n",
       "3  14.0  144.57  0.342  0.1627  ...  2025-08-11T22:14:22.638Z   \n",
       "4  61.0  106.00  1.539  0.6000  ...  2025-08-12T00:35:51.040Z   \n",
       "\n",
       "                               place        type horizontalError depthError  \\\n",
       "0     7 km SW of Copperville, Alaska  earthquake             NaN      0.300   \n",
       "1         38 km S of Tolsona, Alaska  earthquake             NaN      3.200   \n",
       "2   256 km SE of Vilyuchinsk, Russia  earthquake            7.30      1.883   \n",
       "3          60 km NE of Valmy, Nevada  earthquake             NaN      3.300   \n",
       "4  170 km SSE of Vilyuchinsk, Russia  earthquake            6.76      1.859   \n",
       "\n",
       "   magError  magNst     status  locationSource magSource  \n",
       "0       NaN     NaN  automatic              ak        ak  \n",
       "1       NaN     NaN  automatic              ak        ak  \n",
       "2     0.069    61.0   reviewed              us        us  \n",
       "3     0.260    12.0   reviewed              nn        nn  \n",
       "4     0.043   175.0   reviewed              us        us  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see above that each entry gets a generic row index of 0, 1, 2,... That isn't particularly useful for our analysis since the indices don't mean anything physical. Let's change that by telling Pandas which column to use as the index. In this case we will use the earthquake ID. These are unique alphanumeric strings assigned by USGS to each earthquake."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "      <th>magType</th>\n",
       "      <th>nst</th>\n",
       "      <th>gap</th>\n",
       "      <th>dmin</th>\n",
       "      <th>rms</th>\n",
       "      <th>...</th>\n",
       "      <th>updated</th>\n",
       "      <th>place</th>\n",
       "      <th>type</th>\n",
       "      <th>horizontalError</th>\n",
       "      <th>depthError</th>\n",
       "      <th>magError</th>\n",
       "      <th>magNst</th>\n",
       "      <th>status</th>\n",
       "      <th>locationSource</th>\n",
       "      <th>magSource</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ak025aagkam9</th>\n",
       "      <td>2025-08-12 00:30:58.784000+00:00</td>\n",
       "      <td>62.0080</td>\n",
       "      <td>-145.5334</td>\n",
       "      <td>9.8</td>\n",
       "      <td>2.6</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.8700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:37:39.629Z</td>\n",
       "      <td>7 km SW of Copperville, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.300</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ak025aagka93</th>\n",
       "      <td>2025-08-12 00:30:53.834000+00:00</td>\n",
       "      <td>61.7409</td>\n",
       "      <td>-146.0972</td>\n",
       "      <td>42.4</td>\n",
       "      <td>2.6</td>\n",
       "      <td>ml</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.5700</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:35.397Z</td>\n",
       "      <td>38 km S of Tolsona, Alaska</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>automatic</td>\n",
       "      <td>ak</td>\n",
       "      <td>ak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzzz</th>\n",
       "      <td>2025-08-11 23:45:41.896000+00:00</td>\n",
       "      <td>51.1937</td>\n",
       "      <td>160.8599</td>\n",
       "      <td>10.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>mb</td>\n",
       "      <td>25.0</td>\n",
       "      <td>135.00</td>\n",
       "      <td>2.283</td>\n",
       "      <td>0.4400</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:10:36.040Z</td>\n",
       "      <td>256 km SE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>7.30</td>\n",
       "      <td>1.883</td>\n",
       "      <td>0.069</td>\n",
       "      <td>61.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nn00902440</th>\n",
       "      <td>2025-08-11 21:24:31.503000+00:00</td>\n",
       "      <td>41.2421</td>\n",
       "      <td>-116.7149</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>ml</td>\n",
       "      <td>14.0</td>\n",
       "      <td>144.57</td>\n",
       "      <td>0.342</td>\n",
       "      <td>0.1627</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-11T22:14:22.638Z</td>\n",
       "      <td>60 km NE of Valmy, Nevada</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.300</td>\n",
       "      <td>0.260</td>\n",
       "      <td>12.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>nn</td>\n",
       "      <td>nn</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzz1</th>\n",
       "      <td>2025-08-11 21:02:42.456000+00:00</td>\n",
       "      <td>51.6515</td>\n",
       "      <td>159.7787</td>\n",
       "      <td>35.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>mb</td>\n",
       "      <td>61.0</td>\n",
       "      <td>106.00</td>\n",
       "      <td>1.539</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>...</td>\n",
       "      <td>2025-08-12T00:35:51.040Z</td>\n",
       "      <td>170 km SSE of Vilyuchinsk, Russia</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>6.76</td>\n",
       "      <td>1.859</td>\n",
       "      <td>0.043</td>\n",
       "      <td>175.0</td>\n",
       "      <td>reviewed</td>\n",
       "      <td>us</td>\n",
       "      <td>us</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         time  latitude  longitude  depth  \\\n",
       "id                                                                          \n",
       "ak025aagkam9 2025-08-12 00:30:58.784000+00:00   62.0080  -145.5334    9.8   \n",
       "ak025aagka93 2025-08-12 00:30:53.834000+00:00   61.7409  -146.0972   42.4   \n",
       "us6000qzzz   2025-08-11 23:45:41.896000+00:00   51.1937   160.8599   10.0   \n",
       "nn00902440   2025-08-11 21:24:31.503000+00:00   41.2421  -116.7149    6.3   \n",
       "us6000qzz1   2025-08-11 21:02:42.456000+00:00   51.6515   159.7787   35.0   \n",
       "\n",
       "              mag magType   nst     gap   dmin     rms  ...  \\\n",
       "id                                                      ...   \n",
       "ak025aagkam9  2.6      ml   NaN     NaN    NaN  0.8700  ...   \n",
       "ak025aagka93  2.6      ml   NaN     NaN    NaN  0.5700  ...   \n",
       "us6000qzzz    4.5      mb  25.0  135.00  2.283  0.4400  ...   \n",
       "nn00902440    2.9      ml  14.0  144.57  0.342  0.1627  ...   \n",
       "us6000qzz1    5.0      mb  61.0  106.00  1.539  0.6000  ...   \n",
       "\n",
       "                               updated                              place  \\\n",
       "id                                                                          \n",
       "ak025aagkam9  2025-08-12T00:37:39.629Z     7 km SW of Copperville, Alaska   \n",
       "ak025aagka93  2025-08-12T00:35:35.397Z         38 km S of Tolsona, Alaska   \n",
       "us6000qzzz    2025-08-12T00:10:36.040Z   256 km SE of Vilyuchinsk, Russia   \n",
       "nn00902440    2025-08-11T22:14:22.638Z          60 km NE of Valmy, Nevada   \n",
       "us6000qzz1    2025-08-12T00:35:51.040Z  170 km SSE of Vilyuchinsk, Russia   \n",
       "\n",
       "                    type horizontalError  depthError  magError  magNst  \\\n",
       "id                                                                       \n",
       "ak025aagkam9  earthquake             NaN       0.300       NaN     NaN   \n",
       "ak025aagka93  earthquake             NaN       3.200       NaN     NaN   \n",
       "us6000qzzz    earthquake            7.30       1.883     0.069    61.0   \n",
       "nn00902440    earthquake             NaN       3.300     0.260    12.0   \n",
       "us6000qzz1    earthquake            6.76       1.859     0.043   175.0   \n",
       "\n",
       "                 status locationSource magSource  \n",
       "id                                                \n",
       "ak025aagkam9  automatic             ak        ak  \n",
       "ak025aagka93  automatic             ak        ak  \n",
       "us6000qzzz     reviewed             us        us  \n",
       "nn00902440     reviewed             nn        nn  \n",
       "us6000qzz1     reviewed             us        us  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.set_index('id')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can investigate specific columns of the first 10 entries with the following syntax:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>place</th>\n",
       "      <th>mag</th>\n",
       "      <th>depth</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ak025aagkam9</th>\n",
       "      <td>7 km SW of Copperville, Alaska</td>\n",
       "      <td>2.6</td>\n",
       "      <td>9.800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ak025aagka93</th>\n",
       "      <td>38 km S of Tolsona, Alaska</td>\n",
       "      <td>2.6</td>\n",
       "      <td>42.400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzzz</th>\n",
       "      <td>256 km SE of Vilyuchinsk, Russia</td>\n",
       "      <td>4.5</td>\n",
       "      <td>10.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nn00902440</th>\n",
       "      <td>60 km NE of Valmy, Nevada</td>\n",
       "      <td>2.9</td>\n",
       "      <td>6.300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzz1</th>\n",
       "      <td>170 km SSE of Vilyuchinsk, Russia</td>\n",
       "      <td>5.0</td>\n",
       "      <td>35.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzyh</th>\n",
       "      <td>195 km SE of Vilyuchinsk, Russia</td>\n",
       "      <td>4.8</td>\n",
       "      <td>10.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzvz</th>\n",
       "      <td>94 km NW of Copiapó, Chile</td>\n",
       "      <td>4.8</td>\n",
       "      <td>23.635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzv1</th>\n",
       "      <td>southeast of the Loyalty Islands</td>\n",
       "      <td>4.8</td>\n",
       "      <td>10.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>us6000qzux</th>\n",
       "      <td>115 km SE of Attu Station, Alaska</td>\n",
       "      <td>4.2</td>\n",
       "      <td>35.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nn00902450</th>\n",
       "      <td>55 km NE of Valmy, Nevada</td>\n",
       "      <td>2.5</td>\n",
       "      <td>11.300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          place  mag   depth\n",
       "id                                                          \n",
       "ak025aagkam9     7 km SW of Copperville, Alaska  2.6   9.800\n",
       "ak025aagka93         38 km S of Tolsona, Alaska  2.6  42.400\n",
       "us6000qzzz     256 km SE of Vilyuchinsk, Russia  4.5  10.000\n",
       "nn00902440            60 km NE of Valmy, Nevada  2.9   6.300\n",
       "us6000qzz1    170 km SSE of Vilyuchinsk, Russia  5.0  35.000\n",
       "us6000qzyh     195 km SE of Vilyuchinsk, Russia  4.8  10.000\n",
       "us6000qzvz           94 km NW of Copiapó, Chile  4.8  23.635\n",
       "us6000qzv1     southeast of the Loyalty Islands  4.8  10.000\n",
       "us6000qzux    115 km SE of Attu Station, Alaska  4.2  35.000\n",
       "nn00902450            55 km NE of Valmy, Nevada  2.5  11.300"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['place', 'mag','depth']].head(n=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can grab summary statistics of our entire DataFrame using `df.describe()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>depth</th>\n",
       "      <th>mag</th>\n",
       "      <th>nst</th>\n",
       "      <th>gap</th>\n",
       "      <th>dmin</th>\n",
       "      <th>rms</th>\n",
       "      <th>horizontalError</th>\n",
       "      <th>depthError</th>\n",
       "      <th>magError</th>\n",
       "      <th>magNst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2663.000000</td>\n",
       "      <td>2663.000000</td>\n",
       "      <td>2663.000000</td>\n",
       "      <td>2663.000000</td>\n",
       "      <td>2498.000000</td>\n",
       "      <td>2496.000000</td>\n",
       "      <td>2496.000000</td>\n",
       "      <td>2662.000000</td>\n",
       "      <td>2481.000000</td>\n",
       "      <td>2662.000000</td>\n",
       "      <td>2470.000000</td>\n",
       "      <td>2478.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>35.686975</td>\n",
       "      <td>24.620066</td>\n",
       "      <td>44.237501</td>\n",
       "      <td>4.140421</td>\n",
       "      <td>51.969976</td>\n",
       "      <td>138.648778</td>\n",
       "      <td>1.958450</td>\n",
       "      <td>0.735855</td>\n",
       "      <td>7.573879</td>\n",
       "      <td>4.463947</td>\n",
       "      <td>0.093915</td>\n",
       "      <td>86.439871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>28.067148</td>\n",
       "      <td>142.590874</td>\n",
       "      <td>83.846288</td>\n",
       "      <td>0.893920</td>\n",
       "      <td>39.714453</td>\n",
       "      <td>59.363062</td>\n",
       "      <td>2.873961</td>\n",
       "      <td>0.294644</td>\n",
       "      <td>3.474638</td>\n",
       "      <td>17.009364</td>\n",
       "      <td>0.050587</td>\n",
       "      <td>141.302986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-63.245700</td>\n",
       "      <td>-179.983200</td>\n",
       "      <td>-2.360000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001186</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>19.406700</td>\n",
       "      <td>-149.969300</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>0.527750</td>\n",
       "      <td>0.560000</td>\n",
       "      <td>5.440000</td>\n",
       "      <td>1.869000</td>\n",
       "      <td>0.056000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>51.341200</td>\n",
       "      <td>120.729800</td>\n",
       "      <td>17.413000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>131.000000</td>\n",
       "      <td>1.351000</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>7.970000</td>\n",
       "      <td>1.961000</td>\n",
       "      <td>0.088000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>52.897450</td>\n",
       "      <td>159.673300</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>4.700000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>184.000000</td>\n",
       "      <td>2.246000</td>\n",
       "      <td>0.930000</td>\n",
       "      <td>9.850000</td>\n",
       "      <td>6.337750</td>\n",
       "      <td>0.121000</td>\n",
       "      <td>88.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>83.270300</td>\n",
       "      <td>179.909500</td>\n",
       "      <td>638.859000</td>\n",
       "      <td>8.800000</td>\n",
       "      <td>338.000000</td>\n",
       "      <td>352.000000</td>\n",
       "      <td>33.879000</td>\n",
       "      <td>2.340000</td>\n",
       "      <td>22.620000</td>\n",
       "      <td>850.600000</td>\n",
       "      <td>0.371000</td>\n",
       "      <td>1144.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          latitude    longitude        depth          mag          nst  \\\n",
       "count  2663.000000  2663.000000  2663.000000  2663.000000  2498.000000   \n",
       "mean     35.686975    24.620066    44.237501     4.140421    51.969976   \n",
       "std      28.067148   142.590874    83.846288     0.893920    39.714453   \n",
       "min     -63.245700  -179.983200    -2.360000     2.500000     0.000000   \n",
       "25%      19.406700  -149.969300    10.000000     3.300000    24.000000   \n",
       "50%      51.341200   120.729800    17.413000     4.400000    40.000000   \n",
       "75%      52.897450   159.673300    35.000000     4.700000    68.000000   \n",
       "max      83.270300   179.909500   638.859000     8.800000   338.000000   \n",
       "\n",
       "               gap         dmin          rms  horizontalError   depthError  \\\n",
       "count  2496.000000  2496.000000  2662.000000      2481.000000  2662.000000   \n",
       "mean    138.648778     1.958450     0.735855         7.573879     4.463947   \n",
       "std      59.363062     2.873961     0.294644         3.474638    17.009364   \n",
       "min      12.000000     0.000000     0.050000         0.080000     0.000000   \n",
       "25%     101.000000     0.527750     0.560000         5.440000     1.869000   \n",
       "50%     131.000000     1.351000     0.730000         7.970000     1.961000   \n",
       "75%     184.000000     2.246000     0.930000         9.850000     6.337750   \n",
       "max     352.000000    33.879000     2.340000        22.620000   850.600000   \n",
       "\n",
       "          magError       magNst  \n",
       "count  2470.000000  2478.000000  \n",
       "mean      0.093915    86.439871  \n",
       "std       0.050587   141.302986  \n",
       "min       0.001186     2.000000  \n",
       "25%       0.056000    15.000000  \n",
       "50%       0.088000    30.000000  \n",
       "75%       0.121000    88.000000  \n",
       "max       0.371000  1144.000000  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like the largeset earthquake in the last 30 days was an 8.8 (see column `mag`, row `max`), and the average earthquake size was 4.1 with a standard deviation of 0.89. We can use features like `nlargest` to quickly sort through our data. If we use `nlargest` on `mag` we can find the n largest earthquakes. Let's do 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id\n",
       "us6000qw60    8.8\n",
       "us7000qdyl    7.4\n",
       "us7000qd1y    7.3\n",
       "us6000qvsf    7.0\n",
       "us6000qw6q    6.9\n",
       "us6000qxt4    6.8\n",
       "us7000qcik    6.7\n",
       "us6000qw1a    6.6\n",
       "us6000quy1    6.6\n",
       "us7000qdz2    6.6\n",
       "us7000qdyw    6.6\n",
       "us7000qdye    6.6\n",
       "us6000qvpp    6.5\n",
       "us6000qxsv    6.4\n",
       "us6000qwiq    6.4\n",
       "us6000qugg    6.3\n",
       "us6000qxzw    6.2\n",
       "us6000qwuh    6.2\n",
       "us6000qw6s    6.2\n",
       "us6000qvbw    6.2\n",
       "Name: mag, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.mag.nlargest(n=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's look at some of the more interesting details, like where are these earthquakes happening? We can see there is a column called `place`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id\n",
       "ak025aagkam9       7 km SW of Copperville, Alaska\n",
       "ak025aagka93           38 km S of Tolsona, Alaska\n",
       "us6000qzzz       256 km SE of Vilyuchinsk, Russia\n",
       "nn00902440              60 km NE of Valmy, Nevada\n",
       "us6000qzz1      170 km SSE of Vilyuchinsk, Russia\n",
       "Name: place, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['place'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It looks like the `place` descriptor has lots of extra text. We want something more concise so that we can categorize the earthquakes by larger areas (e.g., Alaska). Let's create a new column, called `loc` where we take just the last phrase in the `place` descriptor. \n",
    "\n",
    "The next step is a little nuanced, because you have to use a regex (regular expression) pattern to find what we are looking for. [Regex](https://www.w3schools.com/python/python_regex.asp) is a powerful tool for parsing text and matching strings of various formats. We won't teach it here, because ChatGPT is very good at generating regex patterns to find exactly what you need. The pattern used here will isolate the text after the comma in the `place` descriptor. If there isn't a comma, then we will take the whole string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                          place     loc\n",
      "id                                                     \n",
      "ak025aagkam9     7 km SW of Copperville, Alaska  Alaska\n",
      "ak025aagka93         38 km S of Tolsona, Alaska  Alaska\n",
      "us6000qzzz     256 km SE of Vilyuchinsk, Russia  Russia\n",
      "nn00902440            60 km NE of Valmy, Nevada  Nevada\n",
      "us6000qzz1    170 km SSE of Vilyuchinsk, Russia  Russia\n"
     ]
    }
   ],
   "source": [
    "# We'll try to get the last comma-separated part of the `place`, or the whole string if there is no comma\n",
    "df['loc'] = df['place'].str.extract(r'(?:,\\s*)([^,]+)$')\n",
    "\n",
    "# If there are entires without a comma (like \"Fiji region\"), fill them with the original value\n",
    "df['loc'] = df['loc'].fillna(df['place'])\n",
    "\n",
    "# compare what we had in 'place' with what we have in 'loc'\n",
    "print(df[['place', 'loc']].head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There could be many earthquakes in the same country, and none in another. Let's look at a list of the unique values in the `loc` column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Alaska', 'Russia', 'Nevada', 'Chile',\n",
       "       'southeast of the Loyalty Islands', 'Mexico', 'Turkey',\n",
       "       'New Zealand', 'Vanuatu', 'Peru', 'CA', 'Tonga',\n",
       "       'south of the Kermadec Islands', 'Philippines', 'Indonesia',\n",
       "       'Timor Leste', 'Colombia', 'Sea of Okhotsk', 'Guam', 'Guatemala',\n",
       "       'Washington', 'south of the Fiji Islands', 'Wyoming',\n",
       "       'Dominican Republic', 'Taiwan', 'Canada', 'Puerto Rico',\n",
       "       'western Indian-Antarctic Ridge', 'central Mid-Atlantic Ridge',\n",
       "       'Burma (Myanmar)', 'Arizona', 'Macquarie Island region',\n",
       "       'Azerbaijan', 'Indiana', 'Ethiopia', 'Chagos Archipelago region',\n",
       "       'Argentina', 'Japan', 'Papua New Guinea', 'Tanzania',\n",
       "       'Japan region', 'Uzbekistan', 'Oregon', 'Hawaii', 'Afghanistan',\n",
       "       'Fiji', 'Tajikistan', 'California', 'U.S. Virgin Islands', 'Texas',\n",
       "       'Greece', 'Solomon Islands', 'Reykjanes Ridge', 'West Chile Rise',\n",
       "       'southern Mid-Atlantic Ridge', 'New Mexico', 'Banda Sea',\n",
       "       'New Jersey', 'Kansas', 'Kyrgyzstan', 'Saint Eustatius and Saba ',\n",
       "       'east of the Kuril Islands', 'Iran', 'Bouvet Island region', 'MX',\n",
       "       'Haiti', 'Fiji region', 'Nicaragua', 'El Salvador', 'Brazil',\n",
       "       'Pacific-Antarctic Ridge', 'China', 'Pakistan', 'Portugal',\n",
       "       'Venezuela', 'Costa Rica', 'Arkansas', 'Gulf of Alaska',\n",
       "       'northern Mid-Atlantic Ridge', 'South Sandwich Islands region',\n",
       "       'Montana', 'Saudi Arabia', 'Russia Earthquake', 'India',\n",
       "       'Mariana Islands region', 'Mauritius - Reunion region', 'Idaho',\n",
       "       'Burundi', 'Ecuador', 'Djibouti', 'Iceland', 'India region',\n",
       "       'Northern Mariana Islands', 'east of the South Sandwich Islands',\n",
       "       'Kermadec Islands region', 'Bolivia', 'west of Macquarie Island',\n",
       "       'Antigua and Barbuda', 'New Caledonia',\n",
       "       'Azores-Cape St. Vincent Ridge', 'Wallis and Futuna', 'Oklahoma',\n",
       "       'Scotia Sea', 'Kazakhstan', 'Yemen', 'Madagascar',\n",
       "       'Easter Island region', 'Falkland Islands region',\n",
       "       'Balleny Islands region', 'southeast of Easter Island',\n",
       "       'North Pacific Ocean', 'north of Ascension Island',\n",
       "       'Iceland region', 'Anguilla', 'Malaysia', 'New Zealand region',\n",
       "       'northern East Pacific Rise', 'off the coast of Oregon',\n",
       "       'Owen Fracture Zone region', 'Carlsberg Ridge',\n",
       "       'east of the North Island of New Zealand', 'south of Tonga',\n",
       "       'Alaska Earthquake', 'Kuril Islands',\n",
       "       'near the north coast of Greenland', 'Mauritius', 'Panama',\n",
       "       'central East Pacific Rise', 'Spain'], dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['loc'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maybe we are only interested in larger earthquakes that are more likely to be felt. We can create a new DataFrame that only contains earthquakes larger than 4.0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_mag4 = df[df['mag'] >= 4.0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can start plotting. Pandas and matplotlib work well together to naturally generate plots that have nicely labeled axes. You will have to define the details of the plots, but Pandas makes it very easy to subset/select data by different columns, date ranges, etc. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Plot Top 5 Most Earthquakes by Location**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# Step 3 — Count earthquakes by location\n",
    "counts = df_mag4['loc'].value_counts()\n",
    "\n",
    "# Step 4 — Select top 5\n",
    "top5 = counts.head(5)\n",
    "\n",
    "# Step 5 — Plot\n",
    "plt.figure(figsize=(8,5))\n",
    "top5.plot(kind='bar', color='skyblue')\n",
    "plt.title('Top 5 Locations with Most Earthquakes (Mag ≥ 4)')\n",
    "plt.xlabel('Location')\n",
    "plt.ylabel('Number of Earthquakes')\n",
    "plt.xticks(rotation=45, ha='right')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Plot a Histogram of Earthquake Magnitudes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,5))\n",
    "plt.hist(df_mag4['mag'], bins=20, color='orange', edgecolor='black')\n",
    "plt.title('Distribution of Earthquake Magnitudes (Mag ≥ 4)')\n",
    "plt.xlabel('Magnitude')\n",
    "plt.ylabel('Count')\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Plot a Histogram From Both Datasets with Log Axis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create subplots\n",
    "fig, axes = plt.subplots(1, 2, figsize=(12,5), sharey=True)\n",
    "\n",
    "# Histogram for all earthquakes\n",
    "axes[0].hist(df['mag'], bins=20, color='skyblue', edgecolor='black')\n",
    "axes[0].set_title('All Earthquakes')\n",
    "axes[0].set_xlabel('Magnitude')\n",
    "axes[0].set_ylabel('Count')\n",
    "axes[0].set_yscale('log')  # Logarithmic y-axis\n",
    "\n",
    "# Histogram for earthquakes with mag >= 4\n",
    "axes[1].hist(df_mag4['mag'], bins=20, color='orange', edgecolor='black')\n",
    "axes[1].set_title('Earthquakes (Mag ≥ 4)')\n",
    "axes[1].set_xlabel('Magnitude')\n",
    "axes[1].set_yscale('log')  # Logarithmic y-axis\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Scatter Plot of Earthquake Locations**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.scatter(df['longitude'], df['latitude'], s=10, alpha=0.6, c='red', edgecolors='k', linewidth=0.3)\n",
    "\n",
    "plt.title('Earthquake Locations')\n",
    "plt.xlabel('Longitude')\n",
    "plt.ylabel('Latitude')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Add a Map to Scatter with Cartopy**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'cartopy'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[19]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mcartopy\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcrs\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mccrs\u001b[39;00m\n\u001b[32m      2\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mcartopy\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mfeature\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mcfeature\u001b[39;00m\n\u001b[32m      4\u001b[39m \u001b[38;5;66;03m# Create a GeoAxes with PlateCarree projection (standard lat/lon)\u001b[39;00m\n",
      "\u001b[31mModuleNotFoundError\u001b[39m: No module named 'cartopy'"
     ]
    }
   ],
   "source": [
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeature\n",
    "\n",
    "# Create a GeoAxes with PlateCarree projection (standard lat/lon)\n",
    "fig = plt.figure(figsize=(12,10))\n",
    "ax = plt.axes(projection=ccrs.PlateCarree())\n",
    "\n",
    "# Add coastlines and land features\n",
    "ax.coastlines(resolution='110m')\n",
    "ax.add_feature(cfeature.LAND, facecolor='lightgray')\n",
    "ax.add_feature(cfeature.OCEAN, facecolor='lightblue')\n",
    "\n",
    "# Scatter earthquake points\n",
    "ax.scatter(df['longitude'], df['latitude'], s=10, c='red', alpha=0.6,\n",
    "           edgecolors='k', linewidth=0.3, transform=ccrs.PlateCarree())\n",
    "\n",
    "# Add gridlines with labels\n",
    "gl = ax.gridlines(draw_labels=True, linewidth=0.5, color='gray', alpha=0.5, linestyle='--')\n",
    "gl.top_labels = False\n",
    "gl.right_labels = False\n",
    "\n",
    "ax.set_title('Earthquake Locations with Coastlines')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Content for this tutorial was inspired by following an assignment from the Earth and Environmental Science Databook. The assignment can be found [here](https://earth-env-data-science.github.io/assignments/basic_pandas.html)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "sio_software",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
